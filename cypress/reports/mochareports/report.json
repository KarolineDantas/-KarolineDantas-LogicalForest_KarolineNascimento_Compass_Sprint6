{
  "stats": {
    "suites": 4,
    "tests": 35,
    "passes": 13,
    "pending": 0,
    "failures": 22,
    "start": "2022-09-17T23:39:23.998Z",
    "end": "2022-09-17T23:39:54.352Z",
    "duration": 16384,
    "testsRegistered": 35,
    "passPercent": 37.142857142857146,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d26b70df-d3d0-4092-90f4-9d6c989c5675",
      "title": "",
      "fullFile": "cypress/integration/quartoFluxo.spec.js",
      "file": "cypress/integration/quartoFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b06b7f3-c207-4ae5-8afd-a75a0bdf6073",
          "title": "Quarto fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem sucesso",
              "fullTitle": "Quarto fluxo para automação Logar sem sucesso",
              "timedOut": null,
              "duration": 237,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.logarSemSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSucesso(resposta);\n});",
              "err": {},
              "uuid": "8e6045f8-491d-4dbe-8f7a-e119b19c49ef",
              "parentUUID": "8b06b7f3-c207-4ae5-8afd-a75a0bdf6073",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem email",
              "fullTitle": "Quarto fluxo para automação Tentativa de login sem email",
              "timedOut": null,
              "duration": 336,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemEmail().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemEmail(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemEmail (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:706:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:212:32)",
                "diff": null
              },
              "uuid": "27371828-e600-481b-b0ec-86320bdc6b68",
              "parentUUID": "8b06b7f3-c207-4ae5-8afd-a75a0bdf6073",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem senha",
              "fullTitle": "Quarto fluxo para automação Tentativa de login sem senha",
              "timedOut": null,
              "duration": 342,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemSenha().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSenha(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemSenha (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:710:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:219:32)",
                "diff": null
              },
              "uuid": "3fb73cb5-7aef-41f9-a969-8c99c1b03e46",
              "parentUUID": "8b06b7f3-c207-4ae5-8afd-a75a0bdf6073",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login com e-mail inválido",
              "fullTitle": "Quarto fluxo para automação Tentativa de login com e-mail inválido",
              "timedOut": null,
              "duration": 320,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginEmailInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginEmailInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Email deve ser um email válido'",
                "estack": "AssertionError: expected undefined to equal 'Email deve ser um email válido'\n    at Function.validarLoginEmailInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:714:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:226:32)",
                "diff": null
              },
              "uuid": "cc271cff-7b10-40b6-805f-12c8006ac732",
              "parentUUID": "8b06b7f3-c207-4ae5-8afd-a75a0bdf6073",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar cadastrar carrinho sem token",
              "fullTitle": "Quarto fluxo para automação Deve tentar cadastrar carrinho sem token",
              "timedOut": null,
              "duration": 177,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroDeCarrinhoSemToken().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 401);\n  _validaServerest.default.validarCadastroDeCarrinhoSemToken(resposta);\n});",
              "err": {},
              "uuid": "3a24eefb-6250-48ae-af61-715cabb3315b",
              "parentUUID": "8b06b7f3-c207-4ae5-8afd-a75a0bdf6073",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "36d60241-d873-4a4f-b3ec-eb66139ab466",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Quarto fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 519,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "9a772468-1177-40b3-a3a9-1c829160cf29",
                  "parentUUID": "36d60241-d873-4a4f-b3ec-eb66139ab466",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar cadastrar mais de um carrinho para o mesmo usuário",
                  "fullTitle": "Quarto fluxo para automação Logar com sucesso Deve tentar cadastrar mais de um carrinho para o mesmo usuário",
                  "timedOut": null,
                  "duration": 499,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoParaMesmoUsuario().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 401);\n  _validaServerest.default.validarCadastroDeCarrinhoParaMesmoUsuario(resposta);\n});",
                  "err": {},
                  "uuid": "93654569-9ebb-476b-b258-ea42337df72f",
                  "parentUUID": "36d60241-d873-4a4f-b3ec-eb66139ab466",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a772468-1177-40b3-a3a9-1c829160cf29",
                "93654569-9ebb-476b-b258-ea42337df72f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1018,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9eca2d0-26cc-45c0-bcb0-764517539987",
              "title": "Logar",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Quarto fluxo para automação Logar Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 641,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Cadastro realizado com sucesso'",
                    "estack": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Cadastro realizado com sucesso'\n    at Function.validarCadastroDeCarrinhoComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:674:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:275:34)",
                    "diff": "- 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\n+ 'Cadastro realizado com sucesso'\n"
                  },
                  "uuid": "58f1b4a7-eba6-43f9-b1c4-9a47fd005d94",
                  "parentUUID": "d9eca2d0-26cc-45c0-bcb0-764517539987",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar cadastrar carrinho com produto duplicado",
                  "fullTitle": "Quarto fluxo para automação Logar Deve tentar cadastrar carrinho com produto duplicado",
                  "timedOut": null,
                  "duration": 658,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComProdutoDuplicado().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 400);\n  _validaServerest.default.validarCadastroDeCarrinhoComProdutoDuplicado(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Não é permitido possuir produto duplicado'",
                    "estack": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Não é permitido possuir produto duplicado'\n    at Function.validarCadastroDeCarrinhoComProdutoDuplicado (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:744:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:282:34)",
                    "diff": "- 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\n+ 'Não é permitido possuir produto duplicado'\n"
                  },
                  "uuid": "bbf4f9d5-da46-45b4-ba14-8680666562bf",
                  "parentUUID": "d9eca2d0-26cc-45c0-bcb0-764517539987",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "58f1b4a7-eba6-43f9-b1c4-9a47fd005d94",
                "bbf4f9d5-da46-45b4-ba14-8680666562bf"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1299,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "8e6045f8-491d-4dbe-8f7a-e119b19c49ef",
            "3a24eefb-6250-48ae-af61-715cabb3315b"
          ],
          "failures": [
            "27371828-e600-481b-b0ec-86320bdc6b68",
            "3fb73cb5-7aef-41f9-a969-8c99c1b03e46",
            "cc271cff-7b10-40b6-805f-12c8006ac732"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1412,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "79fb5972-3be8-42e4-b6f8-c25e2563e8e1",
      "title": "",
      "fullFile": "cypress/integration/segundoFluxo.spec.js",
      "file": "cypress/integration/segundoFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8259a6af-6790-454a-b4db-3bc5c779f429",
          "title": "Segundo fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Tentativa de cadastro com email já utilizado",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com email já utilizado",
              "timedOut": null,
              "duration": 365,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioSemSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioSemSucesso(resposta);\n});",
              "err": {
                "message": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Este email já está sendo usado'",
                "estack": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Este email já está sendo usado'\n    at Function.validarCadastroUsuarioSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:677:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:206:32)",
                "diff": "- 'Cadastro realizado com sucesso'\n+ 'Este email já está sendo usado'\n"
              },
              "uuid": "319ff5cd-2700-44e1-b89a-43d15193fc9d",
              "parentUUID": "8259a6af-6790-454a-b4db-3bc5c779f429",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de cadastro com email inválido",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com email inválido",
              "timedOut": null,
              "duration": 330,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroUsuarioEmailInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioEmailInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Email deve ser um email válido'",
                "estack": "AssertionError: expected undefined to equal 'Email deve ser um email válido'\n    at Function.validarCadastroUsuarioEmailInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:681:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:213:32)",
                "diff": null
              },
              "uuid": "74a95e3f-91f0-4e2b-bc3f-8d710ef1c361",
              "parentUUID": "8259a6af-6790-454a-b4db-3bc5c779f429",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de cadastro com senha inválida",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com senha inválida",
              "timedOut": null,
              "duration": 318,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroUsuarioSenhaInvalida().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioSenhaInvalida(resposta);\n});",
              "err": {
                "message": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Senha deve conter no mínimo 4 caracteres'",
                "estack": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Senha deve conter no mínimo 4 caracteres'\n    at Function.validarCadastroUsuarioSenhaInvalida (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:685:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:220:32)",
                "diff": "- 'Cadastro realizado com sucesso'\n+ 'Senha deve conter no mínimo 4 caracteres'\n"
              },
              "uuid": "f91eea41-4b75-4c0d-a939-3d7fc40e295f",
              "parentUUID": "8259a6af-6790-454a-b4db-3bc5c779f429",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de cadastro com nome inválido",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com nome inválido",
              "timedOut": null,
              "duration": 362,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroUsuarioNomeInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioNomeInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected 'Este email já está sendo usado' to equal 'Nome inválido, tente novamente'",
                "estack": "AssertionError: expected 'Este email já está sendo usado' to equal 'Nome inválido, tente novamente'\n    at Function.validarCadastroUsuarioNomeInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:689:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:227:32)",
                "diff": "- 'Este email já está sendo usado'\n+ 'Nome inválido, tente novamente'\n"
              },
              "uuid": "a9042c02-cd2d-409f-8aae-e897a4e382d3",
              "parentUUID": "8259a6af-6790-454a-b4db-3bc5c779f429",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro de usuário com sucesso",
              "fullTitle": "Segundo fluxo para automação Cadastro de usuário com sucesso",
              "timedOut": null,
              "duration": 242,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_factory.default.gerarUsuario;\n_serverest.default.cadastrarUsuarioComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 201);\n  _validaServerest.default.validarCadastroDeProdutoComSucesso(resposta);\n});",
              "err": {},
              "uuid": "388a4c49-3f61-4c01-90cd-be098ee85877",
              "parentUUID": "8259a6af-6790-454a-b4db-3bc5c779f429",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "24745517-a462-44e4-be53-0cd1699b2601",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve consultar os produtos da loja",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve consultar os produtos da loja",
                  "timedOut": null,
                  "duration": 512,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(resposta);\n});",
                  "err": {},
                  "uuid": "e1ec6aff-ff7b-412e-a9c4-c9e00a6588ae",
                  "parentUUID": "24745517-a462-44e4-be53-0cd1699b2601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 651,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Não é permitido ter mais de 1 carrinho' to equal 'Cadastro realizado com sucesso'",
                    "estack": "AssertionError: expected 'Não é permitido ter mais de 1 carrinho' to equal 'Cadastro realizado com sucesso'\n    at Function.validarCadastroDeCarrinhoComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:669:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:260:34)",
                    "diff": "- 'Não é permitido ter mais de 1 carrinho'\n+ 'Cadastro realizado com sucesso'\n"
                  },
                  "uuid": "16d97f0d-47e5-436d-85cf-ca6ba33dc595",
                  "parentUUID": "24745517-a462-44e4-be53-0cd1699b2601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar carrinho por _id com sucesso",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve buscar carrinho por _id com sucesso",
                  "timedOut": null,
                  "duration": 673,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoPorId();\ncy.get('@idCarrinho').then(resposta => {\n  cy.contractValidation(resposta, 'get-carrinhos-id', 200);\n  _validaServerest.default.validarBuscaDeCarrinhoPorIdComSucesso(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "c690a3c3-9c5e-4e76-b10d-bf99073028da",
                  "parentUUID": "24745517-a462-44e4-be53-0cd1699b2601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve concluir compra com sucesso",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve concluir compra com sucesso",
                  "timedOut": null,
                  "duration": 517,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCompra().then(resposta => {\n  cy.contractValidation(resposta, 'delete-carrinhos', 200);\n  _validaServerest.default.validarConclusaoDeComprasSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "54262ff2-febd-4988-89f0-c9776a562bac",
                  "parentUUID": "24745517-a462-44e4-be53-0cd1699b2601",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1ec6aff-ff7b-412e-a9c4-c9e00a6588ae",
                "54262ff2-febd-4988-89f0-c9776a562bac"
              ],
              "failures": [
                "16d97f0d-47e5-436d-85cf-ca6ba33dc595",
                "c690a3c3-9c5e-4e76-b10d-bf99073028da"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "388a4c49-3f61-4c01-90cd-be098ee85877"
          ],
          "failures": [
            "319ff5cd-2700-44e1-b89a-43d15193fc9d",
            "74a95e3f-91f0-4e2b-bc3f-8d710ef1c361",
            "f91eea41-4b75-4c0d-a939-3d7fc40e295f",
            "a9042c02-cd2d-409f-8aae-e897a4e382d3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1617,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "00310772-7818-471a-8d75-4f95ca05e470",
      "title": "",
      "fullFile": "cypress/integration/terceiroFluxo.spec.js",
      "file": "cypress/integration/terceiroFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00bb64c3-91b2-4fd1-acc9-cc0d2201db83",
          "title": "Terceiro fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem sucesso",
              "fullTitle": "Terceiro fluxo para automação Logar sem sucesso",
              "timedOut": null,
              "duration": 244,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.logarSemSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSucesso(resposta);\n});",
              "err": {},
              "uuid": "71a0cb16-eeb1-4f48-bfe4-7c36251c9d42",
              "parentUUID": "00bb64c3-91b2-4fd1-acc9-cc0d2201db83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem email",
              "fullTitle": "Terceiro fluxo para automação Tentativa de login sem email",
              "timedOut": null,
              "duration": 311,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemEmail().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemEmail(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemEmail (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:721:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:215:32)",
                "diff": null
              },
              "uuid": "a74b2e3e-1ca4-473f-adf1-14b4abb9e40f",
              "parentUUID": "00bb64c3-91b2-4fd1-acc9-cc0d2201db83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem senha",
              "fullTitle": "Terceiro fluxo para automação Tentativa de login sem senha",
              "timedOut": null,
              "duration": 322,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemSenha().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSenha(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemSenha (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:725:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:222:32)",
                "diff": null
              },
              "uuid": "ecb53cc5-8b32-4904-9fbe-a028b70d3750",
              "parentUUID": "00bb64c3-91b2-4fd1-acc9-cc0d2201db83",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login com e-mail inválido",
              "fullTitle": "Terceiro fluxo para automação Tentativa de login com e-mail inválido",
              "timedOut": null,
              "duration": 311,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginEmailInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginEmailInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Email deve ser um email válido'",
                "estack": "AssertionError: expected undefined to equal 'Email deve ser um email válido'\n    at Function.validarLoginEmailInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:729:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:229:32)",
                "diff": null
              },
              "uuid": "0b364a94-644f-46c2-acff-89af518a29ae",
              "parentUUID": "00bb64c3-91b2-4fd1-acc9-cc0d2201db83",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve buscar um usuário por _id sem sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar um usuário por _id sem sucesso",
                  "timedOut": null,
                  "duration": 509,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUsuarioPorIdErro().then(resposta => {\n  cy.contractValidation(resposta, 'get-usuarios-id', 400);\n  _validaServerest.default.validarBuscaDeUsuarioPorIdSemSucesso(resposta);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'then')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'then')\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:244:50)",
                    "diff": null
                  },
                  "uuid": "99af3134-90ff-4102-93ec-6b63e6f61370",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um usuário por _id com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar um usuário por _id com sucesso",
                  "timedOut": null,
                  "duration": 493,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUsuarioPorId().then(resposta => {\n  cy.contractValidation(resposta, 'get-usuarios-id', 200);\n  _validaServerest.default.validarBuscaDeUsuarioPorIdSucesso(resposta);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'then')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'then')\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:252:46)",
                    "diff": null
                  },
                  "uuid": "b6738e33-b6b5-431c-907c-bccec359eb36",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve consultar os produtos da loja",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve consultar os produtos da loja",
                  "timedOut": null,
                  "duration": 518,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(resposta);\n});",
                  "err": {},
                  "uuid": "f1336c3e-c64b-463f-aac8-d71311f0498b",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 499,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "7a07b63a-cc71-4f32-bbf2-3fa852f6a14f",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar carrinho por _id sem sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar carrinho por _id sem sucesso",
                  "timedOut": null,
                  "duration": 636,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoPorIdSemSucesso();\ncy.get('@idCarrinho').then(resposta => {\n  cy.contractValidation(resposta, 'get-carrinhos-id', 400);\n  _validaServerest.default.validarBuscaDeCarrinhoPorIdComSucesso(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "07e69fb7-06ab-418e-95bc-a6cef6028307",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar carrinho por _id com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar carrinho por _id com sucesso",
                  "timedOut": null,
                  "duration": 658,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoPorId();\ncy.get('@idCarrinho').then(resposta => {\n  cy.contractValidation(resposta, 'get-carrinhos-id', 200);\n  _validaServerest.default.validarBuscaDeCarrinhoPorIdComSucesso(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "a1e837d0-e3cd-46a9-887a-acc8bece8e7a",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cancelar compra com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve cancelar compra com sucesso",
                  "timedOut": null,
                  "duration": 709,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cancelarCompraComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'delete-carrinhos', 200);\n  _validaServerest.default.validarConclusaoDeComprasSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'",
                    "estack": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'\n    at Function.validarConclusaoDeComprasSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:693:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:297:34)",
                    "diff": "- 'Registro excluído com sucesso. Estoque dos produtos reabastecido'\n+ 'Registro excluído com sucesso'\n"
                  },
                  "uuid": "72dd3a52-a905-4c2d-acea-94586eb1fdd2",
                  "parentUUID": "962cc750-8265-4947-9fc1-f7d61b42b7d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1336c3e-c64b-463f-aac8-d71311f0498b",
                "7a07b63a-cc71-4f32-bbf2-3fa852f6a14f"
              ],
              "failures": [
                "99af3134-90ff-4102-93ec-6b63e6f61370",
                "b6738e33-b6b5-431c-907c-bccec359eb36",
                "07e69fb7-06ab-418e-95bc-a6cef6028307",
                "a1e837d0-e3cd-46a9-887a-acc8bece8e7a",
                "72dd3a52-a905-4c2d-acea-94586eb1fdd2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4022,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "71a0cb16-eeb1-4f48-bfe4-7c36251c9d42"
          ],
          "failures": [
            "a74b2e3e-1ca4-473f-adf1-14b4abb9e40f",
            "ecb53cc5-8b32-4904-9fbe-a028b70d3750",
            "0b364a94-644f-46c2-acff-89af518a29ae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1188,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a0f1e627-9c8e-483e-8c03-99f808a789ae",
      "title": "",
      "fullFile": "cypress/integration/primeiroFluxo.spec.js",
      "file": "cypress/integration/primeiroFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "622c87e9-f585-4c59-a8b5-9d67d2a4b2fc",
          "title": "Primeiro fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastro de usuário com sucesso",
              "fullTitle": "Primeiro fluxo para automação Cadastro de usuário com sucesso",
              "timedOut": null,
              "duration": 417,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_factory.default.gerarUsuario;\n_serverest.default.cadastrarUsuarioComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 201);\n  _validaServerest.default.validarCadastroDeProdutoComSucesso(resposta);\n});",
              "err": {},
              "uuid": "f28d43bc-f987-455f-be0d-a75400ec604a",
              "parentUUID": "622c87e9-f585-4c59-a8b5-9d67d2a4b2fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8428a7b1-d14a-4e3c-a0b3-6276285868fa",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve consultar os produtos da loja",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve consultar os produtos da loja",
                  "timedOut": null,
                  "duration": 524,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(resposta);\n});",
                  "err": {},
                  "uuid": "e0069b12-5e8d-471f-a813-95f1efdedafc",
                  "parentUUID": "8428a7b1-d14a-4e3c-a0b3-6276285868fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto pelo _id sem sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve buscar um produto pelo _id sem sucesso",
                  "timedOut": null,
                  "duration": 682,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoPorIdSemSucesso();\ncy.get('@idProduto').then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos-id', 400);\n  _validaServerest.default.validarBuscaDeProdutosPorIdSemSucesso(resposta);\n});",
                  "err": {
                    "message": "ReferenceError: _id is not defined",
                    "estack": "ReferenceError: _id is not defined\n    at Function.validarBuscaDeProdutosPorIdSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\primeiroFluxo.spec.js:645:52)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\primeiroFluxo.spec.js:234:34)",
                    "diff": null
                  },
                  "uuid": "72f48b29-9823-4a21-bd96-d4904ff64355",
                  "parentUUID": "8428a7b1-d14a-4e3c-a0b3-6276285868fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto pelo _id com sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve buscar um produto pelo _id com sucesso",
                  "timedOut": null,
                  "duration": 689,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoPorId();\ncy.get('@idProduto').then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos-id', 200);\n  _validaServerest.default.validarBuscaDeProdutosPorId(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "58a428cb-9d7e-4bd0-8162-c6f91cbf98ee",
                  "parentUUID": "8428a7b1-d14a-4e3c-a0b3-6276285868fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 655,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Não é permitido ter mais de 1 carrinho' to equal 'Cadastro realizado com sucesso'",
                    "estack": "AssertionError: expected 'Não é permitido ter mais de 1 carrinho' to equal 'Cadastro realizado com sucesso'\n    at Function.validarCadastroDeCarrinhoComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\primeiroFluxo.spec.js:650:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\primeiroFluxo.spec.js:251:34)",
                    "diff": "- 'Não é permitido ter mais de 1 carrinho'\n+ 'Cadastro realizado com sucesso'\n"
                  },
                  "uuid": "5702047b-4e16-4949-b06f-d0fe2576a8d3",
                  "parentUUID": "8428a7b1-d14a-4e3c-a0b3-6276285868fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve concluir compra com sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve concluir compra com sucesso",
                  "timedOut": null,
                  "duration": 508,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCompra().then(resposta => {\n  cy.contractValidation(resposta, 'delete-carrinhos', 200);\n  _validaServerest.default.validarConclusaoDeComprasSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "7d9cc2d7-f416-48b5-9de2-0823e062cfa9",
                  "parentUUID": "8428a7b1-d14a-4e3c-a0b3-6276285868fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0069b12-5e8d-471f-a813-95f1efdedafc",
                "7d9cc2d7-f416-48b5-9de2-0823e062cfa9"
              ],
              "failures": [
                "72f48b29-9823-4a21-bd96-d4904ff64355",
                "58a428cb-9d7e-4bd0-8162-c6f91cbf98ee",
                "5702047b-4e16-4949-b06f-d0fe2576a8d3"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3058,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "f28d43bc-f987-455f-be0d-a75400ec604a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 417,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}