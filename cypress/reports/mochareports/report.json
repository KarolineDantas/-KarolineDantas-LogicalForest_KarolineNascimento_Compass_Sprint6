{
  "stats": {
    "suites": 4,
    "tests": 35,
    "passes": 14,
    "pending": 0,
    "failures": 21,
    "start": "2022-09-19T14:55:33.515Z",
    "end": "2022-09-19T14:56:04.099Z",
    "duration": 16539,
    "testsRegistered": 35,
    "passPercent": 40,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a1ef4c8d-ae62-4fb5-b421-c1538364d82d",
      "title": "",
      "fullFile": "cypress/integration/quartoFluxo.spec.js",
      "file": "cypress/integration/quartoFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "761dc168-fba7-4584-ac42-08d554787634",
          "title": "Quarto fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem sucesso",
              "fullTitle": "Quarto fluxo para automação Logar sem sucesso",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.logarSemSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSucesso(resposta);\n});",
              "err": {},
              "uuid": "34da3888-6f16-4440-bd38-8d458e88c773",
              "parentUUID": "761dc168-fba7-4584-ac42-08d554787634",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem email",
              "fullTitle": "Quarto fluxo para automação Tentativa de login sem email",
              "timedOut": null,
              "duration": 338,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemEmail().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemEmail(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemEmail (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:706:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:212:32)",
                "diff": null
              },
              "uuid": "f4db3852-1de3-4a7d-a15b-e29dc124ef36",
              "parentUUID": "761dc168-fba7-4584-ac42-08d554787634",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem senha",
              "fullTitle": "Quarto fluxo para automação Tentativa de login sem senha",
              "timedOut": null,
              "duration": 312,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemSenha().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSenha(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemSenha (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:710:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:219:32)",
                "diff": null
              },
              "uuid": "be723811-1c17-4655-8b2a-d8ac12748d48",
              "parentUUID": "761dc168-fba7-4584-ac42-08d554787634",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login com e-mail inválido",
              "fullTitle": "Quarto fluxo para automação Tentativa de login com e-mail inválido",
              "timedOut": null,
              "duration": 317,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginEmailInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginEmailInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Email deve ser um email válido'",
                "estack": "AssertionError: expected undefined to equal 'Email deve ser um email válido'\n    at Function.validarLoginEmailInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:714:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:226:32)",
                "diff": null
              },
              "uuid": "78bc783c-58e4-482a-af03-844bf25d25dc",
              "parentUUID": "761dc168-fba7-4584-ac42-08d554787634",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve tentar cadastrar carrinho sem token",
              "fullTitle": "Quarto fluxo para automação Deve tentar cadastrar carrinho sem token",
              "timedOut": null,
              "duration": 175,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroDeCarrinhoSemToken().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 401);\n  _validaServerest.default.validarCadastroDeCarrinhoSemToken(resposta);\n});",
              "err": {},
              "uuid": "81bf6914-2df0-4251-a7f1-0565ef602387",
              "parentUUID": "761dc168-fba7-4584-ac42-08d554787634",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d03b2014-5b30-4f2a-9440-0e6c6f6916a7",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Quarto fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 513,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "43d43043-959c-45e3-b116-91b8f5d0fe76",
                  "parentUUID": "d03b2014-5b30-4f2a-9440-0e6c6f6916a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar cadastrar mais de um carrinho para o mesmo usuário",
                  "fullTitle": "Quarto fluxo para automação Logar com sucesso Deve tentar cadastrar mais de um carrinho para o mesmo usuário",
                  "timedOut": null,
                  "duration": 525,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoParaMesmoUsuario().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 401);\n  _validaServerest.default.validarCadastroDeCarrinhoParaMesmoUsuario(resposta);\n});",
                  "err": {},
                  "uuid": "9155733c-c2df-4e45-82a4-f319e10dc5fd",
                  "parentUUID": "d03b2014-5b30-4f2a-9440-0e6c6f6916a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43d43043-959c-45e3-b116-91b8f5d0fe76",
                "9155733c-c2df-4e45-82a4-f319e10dc5fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1038,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11a3970b-9e90-4460-a9ca-93db97dbd92a",
              "title": "Logar",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Quarto fluxo para automação Logar Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 681,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Cadastro realizado com sucesso'",
                    "estack": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Cadastro realizado com sucesso'\n    at Function.validarCadastroDeCarrinhoComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:674:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:275:34)",
                    "diff": "- 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\n+ 'Cadastro realizado com sucesso'\n"
                  },
                  "uuid": "975efd98-7ca4-45ad-bf15-880eacc12765",
                  "parentUUID": "11a3970b-9e90-4460-a9ca-93db97dbd92a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve tentar cadastrar carrinho com produto duplicado",
                  "fullTitle": "Quarto fluxo para automação Logar Deve tentar cadastrar carrinho com produto duplicado",
                  "timedOut": null,
                  "duration": 644,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComProdutoDuplicado().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 400);\n  _validaServerest.default.validarCadastroDeCarrinhoComProdutoDuplicado(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Não é permitido possuir produto duplicado'",
                    "estack": "AssertionError: expected 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais' to equal 'Não é permitido possuir produto duplicado'\n    at Function.validarCadastroDeCarrinhoComProdutoDuplicado (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:744:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\quartoFluxo.spec.js:282:34)",
                    "diff": "- 'Token de acesso ausente, inválido, expirado ou usuário do token não existe mais'\n+ 'Não é permitido possuir produto duplicado'\n"
                  },
                  "uuid": "e16f99c7-b480-40c7-ba37-fc7e2042851b",
                  "parentUUID": "11a3970b-9e90-4460-a9ca-93db97dbd92a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "975efd98-7ca4-45ad-bf15-880eacc12765",
                "e16f99c7-b480-40c7-ba37-fc7e2042851b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1325,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "34da3888-6f16-4440-bd38-8d458e88c773",
            "81bf6914-2df0-4251-a7f1-0565ef602387"
          ],
          "failures": [
            "f4db3852-1de3-4a7d-a15b-e29dc124ef36",
            "be723811-1c17-4655-8b2a-d8ac12748d48",
            "78bc783c-58e4-482a-af03-844bf25d25dc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1361,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1ed57fe5-a181-483b-82c6-2089daa981fb",
      "title": "",
      "fullFile": "cypress/integration/segundoFluxo.spec.js",
      "file": "cypress/integration/segundoFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "89228bd1-712f-4db5-8698-e6d0e77a2b4e",
          "title": "Segundo fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Tentativa de cadastro com email já utilizado",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com email já utilizado",
              "timedOut": null,
              "duration": 369,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastrarUsuarioSemSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioSemSucesso(resposta);\n});",
              "err": {
                "message": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Este email já está sendo usado'",
                "estack": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Este email já está sendo usado'\n    at Function.validarCadastroUsuarioSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:677:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:206:32)",
                "diff": "- 'Cadastro realizado com sucesso'\n+ 'Este email já está sendo usado'\n"
              },
              "uuid": "d27985a6-709e-45f1-a79e-02d8cd1eefea",
              "parentUUID": "89228bd1-712f-4db5-8698-e6d0e77a2b4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de cadastro com email inválido",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com email inválido",
              "timedOut": null,
              "duration": 311,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroUsuarioEmailInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioEmailInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Email deve ser um email válido'",
                "estack": "AssertionError: expected undefined to equal 'Email deve ser um email válido'\n    at Function.validarCadastroUsuarioEmailInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:681:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:213:32)",
                "diff": null
              },
              "uuid": "ed80acde-0e8f-4112-a50b-1aaa2b5a90af",
              "parentUUID": "89228bd1-712f-4db5-8698-e6d0e77a2b4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de cadastro com senha inválida",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com senha inválida",
              "timedOut": null,
              "duration": 357,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroUsuarioSenhaInvalida().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioSenhaInvalida(resposta);\n});",
              "err": {
                "message": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Senha deve conter no mínimo 4 caracteres'",
                "estack": "AssertionError: expected 'Cadastro realizado com sucesso' to equal 'Senha deve conter no mínimo 4 caracteres'\n    at Function.validarCadastroUsuarioSenhaInvalida (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:685:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:220:32)",
                "diff": "- 'Cadastro realizado com sucesso'\n+ 'Senha deve conter no mínimo 4 caracteres'\n"
              },
              "uuid": "86270e64-dee6-4ff8-90aa-be1ca4d99ea3",
              "parentUUID": "89228bd1-712f-4db5-8698-e6d0e77a2b4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de cadastro com nome inválido",
              "fullTitle": "Segundo fluxo para automação Tentativa de cadastro com nome inválido",
              "timedOut": null,
              "duration": 363,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.cadastroUsuarioNomeInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 400);\n  _validaServerest.default.validarCadastroUsuarioNomeInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected 'Este email já está sendo usado' to equal 'Nome inválido, tente novamente'",
                "estack": "AssertionError: expected 'Este email já está sendo usado' to equal 'Nome inválido, tente novamente'\n    at Function.validarCadastroUsuarioNomeInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:689:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:227:32)",
                "diff": "- 'Este email já está sendo usado'\n+ 'Nome inválido, tente novamente'\n"
              },
              "uuid": "71302179-b369-4890-8846-c7afda573a62",
              "parentUUID": "89228bd1-712f-4db5-8698-e6d0e77a2b4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastro de usuário com sucesso",
              "fullTitle": "Segundo fluxo para automação Cadastro de usuário com sucesso",
              "timedOut": null,
              "duration": 216,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_factory.default.gerarUsuario;\n_serverest.default.cadastrarUsuarioComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 201);\n  _validaServerest.default.validarCadastroDeProdutoComSucesso(resposta);\n});",
              "err": {},
              "uuid": "dcb8c09f-b9b6-4361-aa31-251780694d99",
              "parentUUID": "89228bd1-712f-4db5-8698-e6d0e77a2b4e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ec48d816-6756-440a-8d2f-834503c1b153",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve consultar os produtos da loja",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve consultar os produtos da loja",
                  "timedOut": null,
                  "duration": 594,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(resposta);\n});",
                  "err": {},
                  "uuid": "5d91b4b8-f816-4c8d-9486-2d971b50087f",
                  "parentUUID": "ec48d816-6756-440a-8d2f-834503c1b153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 691,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Não é permitido ter mais de 1 carrinho' to equal 'Cadastro realizado com sucesso'",
                    "estack": "AssertionError: expected 'Não é permitido ter mais de 1 carrinho' to equal 'Cadastro realizado com sucesso'\n    at Function.validarCadastroDeCarrinhoComSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:669:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\segundoFluxo.spec.js:260:34)",
                    "diff": "- 'Não é permitido ter mais de 1 carrinho'\n+ 'Cadastro realizado com sucesso'\n"
                  },
                  "uuid": "b9f20f37-684b-42c5-ac21-9d2d0db6fedb",
                  "parentUUID": "ec48d816-6756-440a-8d2f-834503c1b153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar carrinho por _id com sucesso",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve buscar carrinho por _id com sucesso",
                  "timedOut": null,
                  "duration": 710,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoPorId();\ncy.get('@idCarrinho').then(resposta => {\n  cy.contractValidation(resposta, 'get-carrinhos-id', 200);\n  _validaServerest.default.validarBuscaDeCarrinhoPorIdComSucesso(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "dff8d434-7832-4b9a-869a-220bc67966ea",
                  "parentUUID": "ec48d816-6756-440a-8d2f-834503c1b153",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve concluir compra com sucesso",
                  "fullTitle": "Segundo fluxo para automação Logar com sucesso Deve concluir compra com sucesso",
                  "timedOut": null,
                  "duration": 540,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCompra().then(resposta => {\n  cy.contractValidation(resposta, 'delete-carrinhos', 200);\n  _validaServerest.default.validarConclusaoDeComprasSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "3865eef5-6fcc-4b2c-a1b1-1b928e9bc04a",
                  "parentUUID": "ec48d816-6756-440a-8d2f-834503c1b153",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d91b4b8-f816-4c8d-9486-2d971b50087f",
                "3865eef5-6fcc-4b2c-a1b1-1b928e9bc04a"
              ],
              "failures": [
                "b9f20f37-684b-42c5-ac21-9d2d0db6fedb",
                "dff8d434-7832-4b9a-869a-220bc67966ea"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2535,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "dcb8c09f-b9b6-4361-aa31-251780694d99"
          ],
          "failures": [
            "d27985a6-709e-45f1-a79e-02d8cd1eefea",
            "ed80acde-0e8f-4112-a50b-1aaa2b5a90af",
            "86270e64-dee6-4ff8-90aa-be1ca4d99ea3",
            "71302179-b369-4890-8846-c7afda573a62"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1616,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0bf35f57-e8ab-449e-af8f-cb42584cbe5f",
      "title": "",
      "fullFile": "cypress/integration/terceiroFluxo.spec.js",
      "file": "cypress/integration/terceiroFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7fde1d2e-0331-4280-a3f3-28e9c3204f79",
          "title": "Terceiro fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Logar sem sucesso",
              "fullTitle": "Terceiro fluxo para automação Logar sem sucesso",
              "timedOut": null,
              "duration": 233,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_serverest.default.logarSemSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSucesso(resposta);\n});",
              "err": {},
              "uuid": "504c6f3e-7b7f-41db-9ffc-f1c6c068b6c8",
              "parentUUID": "7fde1d2e-0331-4280-a3f3-28e9c3204f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem email",
              "fullTitle": "Terceiro fluxo para automação Tentativa de login sem email",
              "timedOut": null,
              "duration": 374,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemEmail().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemEmail(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemEmail (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:721:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:215:32)",
                "diff": null
              },
              "uuid": "283d3e2a-8f1b-45f5-ac24-f410a1099163",
              "parentUUID": "7fde1d2e-0331-4280-a3f3-28e9c3204f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login sem senha",
              "fullTitle": "Terceiro fluxo para automação Tentativa de login sem senha",
              "timedOut": null,
              "duration": 307,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginSemSenha().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginSemSenha(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'email não pode ficar em branco'",
                "estack": "AssertionError: expected undefined to equal 'email não pode ficar em branco'\n    at Function.validarLoginSemSenha (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:725:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:222:32)",
                "diff": null
              },
              "uuid": "7e8b87a3-4c60-44f4-835e-5b21094e3292",
              "parentUUID": "7fde1d2e-0331-4280-a3f3-28e9c3204f79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Tentativa de login com e-mail inválido",
              "fullTitle": "Terceiro fluxo para automação Tentativa de login com e-mail inválido",
              "timedOut": null,
              "duration": 313,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "_serverest.default.loginEmailInvalido().then(resposta => {\n  cy.contractValidation(resposta, 'post-login', 400);\n  _validaServerest.default.validarLoginEmailInvalido(resposta);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Email deve ser um email válido'",
                "estack": "AssertionError: expected undefined to equal 'Email deve ser um email válido'\n    at Function.validarLoginEmailInvalido (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:729:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:229:32)",
                "diff": null
              },
              "uuid": "a61e0203-4494-4bc5-91c3-3c8d3e0c9821",
              "parentUUID": "7fde1d2e-0331-4280-a3f3-28e9c3204f79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "db659b54-198b-416b-9126-2d1b24b46a22",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve buscar um usuário por _id sem sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar um usuário por _id sem sucesso",
                  "timedOut": null,
                  "duration": 532,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUsuarioPorIdErro().then(resposta => {\n  cy.contractValidation(resposta, 'get-usuarios-id', 400);\n  _validaServerest.default.validarBuscaDeUsuarioPorIdSemSucesso(resposta);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'then')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'then')\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:244:50)",
                    "diff": null
                  },
                  "uuid": "ee7013ae-5eb6-4667-a219-2853acb196dd",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um usuário por _id com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar um usuário por _id com sucesso",
                  "timedOut": null,
                  "duration": 536,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarUsuarioPorId().then(resposta => {\n  cy.contractValidation(resposta, 'get-usuarios-id', 200);\n  _validaServerest.default.validarBuscaDeUsuarioPorIdSucesso(resposta);\n});",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'then')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'then')\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:252:46)",
                    "diff": null
                  },
                  "uuid": "529d79ed-3801-43e7-ab23-562eb54d2486",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve consultar os produtos da loja",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve consultar os produtos da loja",
                  "timedOut": null,
                  "duration": 507,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(resposta);\n});",
                  "err": {},
                  "uuid": "bfe79268-702a-40ac-8308-e2f7cb206f72",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 506,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "584b81f1-4f4d-4860-9b4d-54f54a31a72a",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar carrinho por _id sem sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar carrinho por _id sem sucesso",
                  "timedOut": null,
                  "duration": 706,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoPorIdSemSucesso();\ncy.get('@idCarrinho').then(resposta => {\n  cy.contractValidation(resposta, 'get-carrinhos-id', 400);\n  _validaServerest.default.validarBuscaDeCarrinhoPorIdComSucesso(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "a34ab8b8-dcb7-497a-9e24-c804957ef21a",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar carrinho por _id com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve buscar carrinho por _id com sucesso",
                  "timedOut": null,
                  "duration": 654,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarCarrinhoPorId();\ncy.get('@idCarrinho').then(resposta => {\n  cy.contractValidation(resposta, 'get-carrinhos-id', 200);\n  _validaServerest.default.validarBuscaDeCarrinhoPorIdComSucesso(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "55e17aa1-063c-4da4-8e8a-1562b496a14a",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cancelar compra com sucesso",
                  "fullTitle": "Terceiro fluxo para automação Logar com sucesso Deve cancelar compra com sucesso",
                  "timedOut": null,
                  "duration": 660,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cancelarCompraComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'delete-carrinhos', 200);\n  _validaServerest.default.validarConclusaoDeComprasSucesso(resposta);\n});",
                  "err": {
                    "message": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'",
                    "estack": "AssertionError: expected 'Registro excluído com sucesso. Estoque dos produtos reabastecido' to equal 'Registro excluído com sucesso'\n    at Function.validarConclusaoDeComprasSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:693:41)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\terceiroFluxo.spec.js:297:34)",
                    "diff": "- 'Registro excluído com sucesso. Estoque dos produtos reabastecido'\n+ 'Registro excluído com sucesso'\n"
                  },
                  "uuid": "e7b0d33b-54e0-4ec3-b1c4-119f1fb5f157",
                  "parentUUID": "db659b54-198b-416b-9126-2d1b24b46a22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfe79268-702a-40ac-8308-e2f7cb206f72",
                "584b81f1-4f4d-4860-9b4d-54f54a31a72a"
              ],
              "failures": [
                "ee7013ae-5eb6-4667-a219-2853acb196dd",
                "529d79ed-3801-43e7-ab23-562eb54d2486",
                "a34ab8b8-dcb7-497a-9e24-c804957ef21a",
                "55e17aa1-063c-4da4-8e8a-1562b496a14a",
                "e7b0d33b-54e0-4ec3-b1c4-119f1fb5f157"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "504c6f3e-7b7f-41db-9ffc-f1c6c068b6c8"
          ],
          "failures": [
            "283d3e2a-8f1b-45f5-ac24-f410a1099163",
            "7e8b87a3-4c60-44f4-835e-5b21094e3292",
            "a61e0203-4494-4bc5-91c3-3c8d3e0c9821"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1227,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0e5c895b-0fe7-47d2-b8c9-c0681ed97619",
      "title": "",
      "fullFile": "cypress/integration/primeiroFluxo.spec.js",
      "file": "cypress/integration/primeiroFluxo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e11f101-73a3-4017-b7af-cdce09d5866a",
          "title": "Primeiro fluxo para automação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cadastro de usuário com sucesso",
              "fullTitle": "Primeiro fluxo para automação Cadastro de usuário com sucesso",
              "timedOut": null,
              "duration": 407,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "_factory.default.gerarUsuario;\n_serverest.default.cadastrarUsuarioComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-usuarios', 201);\n  _validaServerest.default.validarCadastroDeProdutoComSucesso(resposta);\n});",
              "err": {},
              "uuid": "aa00d2be-f847-4109-babf-bc9947c54bff",
              "parentUUID": "4e11f101-73a3-4017-b7af-cdce09d5866a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "73b0a815-4b41-43fa-9967-3e42bdcd66d8",
              "title": "Logar com sucesso",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deve consultar os produtos da loja",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve consultar os produtos da loja",
                  "timedOut": null,
                  "duration": 525,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutos().then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos', 200);\n  _validaServerest.default.validarBuscaDeProdutos(resposta);\n});",
                  "err": {},
                  "uuid": "eff0400c-be1b-4906-ae2d-adcdf7fad57f",
                  "parentUUID": "73b0a815-4b41-43fa-9967-3e42bdcd66d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto pelo _id sem sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve buscar um produto pelo _id sem sucesso",
                  "timedOut": null,
                  "duration": 671,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoPorIdSemSucesso();\ncy.get('@idProduto').then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos-id', 400);\n  _validaServerest.default.validarBuscaDeProdutosPorIdSemSucesso(resposta);\n});",
                  "err": {
                    "message": "ReferenceError: _id is not defined",
                    "estack": "ReferenceError: _id is not defined\n    at Function.validarBuscaDeProdutosPorIdSemSucesso (https://serverest.dev/__cypress/tests?p=cypress\\integration\\primeiroFluxo.spec.js:645:52)\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\integration\\primeiroFluxo.spec.js:234:34)",
                    "diff": null
                  },
                  "uuid": "dce11452-458d-4074-acf8-c32b47432983",
                  "parentUUID": "73b0a815-4b41-43fa-9967-3e42bdcd66d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve buscar um produto pelo _id com sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve buscar um produto pelo _id com sucesso",
                  "timedOut": null,
                  "duration": 669,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.buscarProdutoPorId();\ncy.get('@idProduto').then(resposta => {\n  cy.contractValidation(resposta, 'get-produtos-id', 200);\n  _validaServerest.default.validarBuscaDeProdutosPorId(resposta);\n});",
                  "err": {
                    "message": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined",
                    "estack": "Error: Erros encontrados na validação de contrato, por favor verifique: \n must be object, but receive undefined\n    at Context.eval (https://serverest.dev/__cypress/tests?p=cypress\\support\\index.js:227:13)",
                    "diff": null
                  },
                  "uuid": "5608c21d-78e8-4b3e-b72f-1e304d8ee401",
                  "parentUUID": "73b0a815-4b41-43fa-9967-3e42bdcd66d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve cadastrar carrinho com sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve cadastrar carrinho com sucesso",
                  "timedOut": null,
                  "duration": 535,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.cadastroDeCarrinhoComSucesso().then(resposta => {\n  cy.contractValidation(resposta, 'post-carrinhos', 201);\n  _validaServerest.default.validarCadastroDeCarrinhoComSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "162a23ef-4e27-4e60-a23c-27b10a172086",
                  "parentUUID": "73b0a815-4b41-43fa-9967-3e42bdcd66d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deve concluir compra com sucesso",
                  "fullTitle": "Primeiro fluxo para automação Logar com sucesso Deve concluir compra com sucesso",
                  "timedOut": null,
                  "duration": 529,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "_serverest.default.concluirCompra().then(resposta => {\n  cy.contractValidation(resposta, 'delete-carrinhos', 200);\n  _validaServerest.default.validarConclusaoDeComprasSucesso(resposta);\n});",
                  "err": {},
                  "uuid": "70076862-3d67-4e5e-8c0f-ce1174587891",
                  "parentUUID": "73b0a815-4b41-43fa-9967-3e42bdcd66d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eff0400c-be1b-4906-ae2d-adcdf7fad57f",
                "162a23ef-4e27-4e60-a23c-27b10a172086",
                "70076862-3d67-4e5e-8c0f-ce1174587891"
              ],
              "failures": [
                "dce11452-458d-4074-acf8-c32b47432983",
                "5608c21d-78e8-4b3e-b72f-1e304d8ee401"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2929,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "aa00d2be-f847-4109-babf-bc9947c54bff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 407,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}